import torch
import os
from pathlib import Path
from tqdm import tqdm
from model_utils import Config, DiseaseClassifier, predict
from torchvision.datasets import ImageFolder


def analyze_test_images(model, test_dir, class_names):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –≤ —Ç–µ—Å—Ç–æ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    image_extensions = ['.jpg', '.jpeg', '.png', '.JPG', '.JPEG']
    image_files = [
        f for f in os.listdir(test_dir)
        if os.path.splitext(f)[1] in image_extensions
    ]

    print(f"\nüîç –ù–∞–π–¥–µ–Ω–æ {len(image_files)} –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞:")
    
    results = []
    for filename in tqdm(image_files, desc="–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π"):
        image_path = os.path.join(test_dir, filename)
        try:
            prediction = predict(model, image_path, class_names)
            results.append((filename, prediction))
        except Exception as e:
            results.append((filename, f"–û—à–∏–±–∫–∞: {str(e)}"))

    # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –≤ —Ç–∞–±–ª–∏—á–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
    print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–∏–π:")
    print("-" * 65)
    print(f"| {'–§–∞–π–ª':<30} | {'–ü—Ä–µ–¥—Å–∫–∞–∑–∞–Ω–Ω—ã–π –∫–ª–∞—Å—Å':<28} |")
    print("-" * 65)
    for filename, pred in results:
        print(f"| {filename:<30} | {pred:<28} |")
    print("-" * 65)


if __name__ == "__main__":
    # –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏
    model = DiseaseClassifier()
    model.load_state_dict(torch.load("models/plant_disease_model.pth"))
    model.to(Config.DEVICE)
    model.eval()

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏–π –∫–ª–∞—Å—Å–æ–≤
    train_dataset = ImageFolder(Config.DATA_DIR / "train")
    class_names = train_dataset.classes

    # –ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤—ã–º –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º
    test_dir = Config.DATA_DIR / "test"
    
    # –ê–Ω–∞–ª–∏–∑ –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
    analyze_test_images(model, test_dir, class_names)